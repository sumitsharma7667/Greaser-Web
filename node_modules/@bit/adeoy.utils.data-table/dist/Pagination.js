"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactstrap = require("reactstrap");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Pagination = function Pagination(_ref) {
  var currentPage = _ref.currentPage,
      handleCurrentPage = _ref.handleCurrentPage,
      maxPage = _ref.maxPage;
  var offsets = 3;

  var render = function render() {
    var buttons = [];
    var temp = Math.floor(currentPage / offsets);
    var a = temp * offsets - 1;
    var z = temp * offsets + offsets;

    if (a <= 0) {
      a = 1;
    }

    if (z >= maxPage) {
      z = maxPage;
    }

    var _loop = function _loop(i) {
      var key = i;
      var disabled = false;
      var outline = true;

      if (i === currentPage) {
        key = null;
        disabled = true;
        outline = false;
      }

      var btn = /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
        key: i,
        color: "primary",
        outline: outline,
        disabled: disabled,
        onClick: function onClick() {
          return handleCurrentPage(key);
        }
      }, i);

      buttons.push(btn);
    };

    for (var i = a; i <= z; i++) {
      _loop(i);
    }

    return buttons;
  };

  return /*#__PURE__*/_react.default.createElement(_reactstrap.ButtonGroup, null, /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
    color: "primary",
    outline: true,
    disabled: currentPage === 1,
    onClick: function onClick() {
      return handleCurrentPage(1);
    }
  }, "<<"), /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
    color: "primary",
    outline: true,
    disabled: currentPage - 1 < 1,
    onClick: function onClick() {
      return handleCurrentPage(currentPage - 1);
    }
  }, "<"), render(), /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
    color: "primary",
    outline: true,
    disabled: currentPage + 1 > maxPage,
    onClick: function onClick() {
      return handleCurrentPage(currentPage + 1);
    }
  }, ">"), /*#__PURE__*/_react.default.createElement(_reactstrap.Button, {
    color: "primary",
    outline: true,
    disabled: currentPage === maxPage,
    onClick: function onClick() {
      return handleCurrentPage(maxPage);
    }
  }, ">>"));
};

var _default = Pagination;
exports.default = _default;

//# sourceMappingURL=Pagination.jsx.map