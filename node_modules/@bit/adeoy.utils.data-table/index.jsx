import React, { useEffect, useState, Fragment } from "react";
import { Row, Col, Table } from "reactstrap";

import Columns from "./Columns";
import Rows from "./Rows";
import Pagination from "./Pagination";
import Filter from "./Filter";
import PageSize from "./PageSize";
import Counting from "./Counting";
import { like, resolveObjProp } from './utils';


const DataTable = (props) => {
  const data = props.data || [];
  const columns = props.columns;
  const onClickRow = props.onClickRow || null;

  const [dataFiltered, setDataFiltered] = useState(data);
  const [pageSize, setPageSize] = useState(props.pageSize || 10);
  const [maxPage, setMaxPage] = useState(
    Math.ceil(data.length / (props.pageSize || 10))
  );

  const [currentPage, setCurrentPage] = useState(1);
  const [currentRows, setCurrentRows] = useState(data.slice(0, 10));
  const [filter, setFilter] = useState("");
  const [currentSortedCol, setCurrentSortedCol] = useState({ idx: -1, sortedBy: 0 });

  const handlePageSize = (val) => {
    setPageSize(val);
    setMaxPage(Math.ceil(dataFiltered.length / val));
    setCurrentPage(1);
    handleDataFiltered(1, val, dataFiltered);
  };

  const handleFilter = (val) => {
    setFilter(val);

    const query =
      "%" + val.toLowerCase().replace(new RegExp(" ", "g"), "%") + "%";

    let results = [];
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      if (val === "") {
        results.push(row);
        continue;
      }

      const searchRow = columns.map((col) => {
        if (col.data) {
          return resolveObjProp(col.data, row);
        } else {
          return '';
        }
      });
      const cols = Object.values(searchRow).join(" ");
      if (like(cols, query)) {
        results.push(row);
      }
    }
    setDataFiltered(results);
    setMaxPage(Math.ceil(results.length / pageSize));
    setCurrentPage(1);
    handleDataFiltered(1, pageSize, results);
  };

  const handleCurrentPage = (page) => {
    setCurrentPage(page);
    handleDataFiltered(page, pageSize, dataFiltered);
  };

  const handleDataFiltered = (currentPage, pageSize, dataFiltered) => {
    const a = (currentPage - 1) * pageSize;
    const z = currentPage * pageSize;
    setCurrentRows(dataFiltered.slice(a, z));
  };

  const handleSortColumn = (i, nextSort) => {
    const data = [...dataFiltered.sort((a, b) => {
      const col = columns[i];
      let keyA = '', keyB = '';

      if (col.data) {
        keyA = resolveObjProp(col.data, a);
        keyB = resolveObjProp(col.data, b);
      } else {
        keyA = col.format(a);
        keyB = col.format(b);
      }

      if (keyA < keyB) return -nextSort;
      if (keyA > keyB) return nextSort;
      return 0;
    })];

    setDataFiltered(data);
    setCurrentRows(data.slice(0, 10));
    setCurrentPage(1);
    setCurrentSortedCol({ idx: i, sortedBy: nextSort });
  }

  useEffect(() => {
    setDataFiltered(data);
    setCurrentRows(data.slice(0, 10));
  }, [data]);

  return (
    <Fragment>
      <Row className="mb-2">
        <Col xs="6" md="4">
          <PageSize pageSize={pageSize} handlePageSize={handlePageSize} />
        </Col>
        <Col xs="6" md={{ size: 4, offset: 4 }}>
          <Filter filter={filter} handleFilter={handleFilter} />
        </Col>
      </Row>

      <Row>
        <Col xs="12">
          <Table
            striped={props.striped}
            hover={props.hover}
            bordered={props.bordered}
            borderless={props.borderless}
            responsive={props.responsive}
          >
            <Columns
              columns={columns}
              currentSortedCol={currentSortedCol}
              handleSortColumn={handleSortColumn} />
            <Rows
              columns={columns}
              currentRows={currentRows}
              onClickRow={onClickRow}
            />
          </Table>
        </Col>
      </Row>

      <Row>
        <Col xs="12" md="6">
          <Counting
            currentPage={currentPage}
            pageSize={pageSize}
            currentMax={dataFiltered.length}
          />
        </Col>
        <Col xs="12" md="6" className="text-right">
          <Pagination
            currentPage={currentPage}
            handleCurrentPage={handleCurrentPage}
            maxPage={maxPage}
          />
        </Col>
      </Row>
    </Fragment>
  );
};

export default DataTable;
